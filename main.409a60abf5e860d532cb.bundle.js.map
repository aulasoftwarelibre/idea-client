{"version":3,"file":"main.409a60abf5e860d532cb.bundle.js","sources":["webpack:///./locales/messages.tsx","webpack:///./utils/storybook/StoryRouterFix.tsx","webpack:///./components/menu/TopMenu.tsx","webpack:///./components/idea/IdeaExtraItem.tsx","webpack:///./components/idea/IdeaItem.tsx","webpack:///./config/storybook/config.js"],"sourcesContent":["// Provide your messages\nexport const messages = {\n  en: {\n    'idea.action.closed': 'Closed',\n    'idea.action.join': 'Join',\n    'idea.action.joined': 'Joined',\n    'idea.action.leave': 'Leave',\n    'idea.footer.developed_by': 'Developed by',\n    'idea.footer.hosted_by': 'Hosted by',\n    'idea.send': `Send by {user}`,\n    'idea.state.new': 'NEW',\n    'idea.state.pending': 'PENDING',\n    'idea.state.approved': 'APPROVED',\n    'idea.state.rejected': 'REJECTED',\n    'idea.topmenu.help': 'Help',\n    'idea.topmenu.home': 'Home',\n    'idea.extra.users': `{count}/{seats} {count, plural, one {person} other {people}}`,\n    'idea.extra.users.unlimited': `{count} {count, plural, one {person} other {people}}`\n  },\n  es: {\n    'idea.action.closed': 'Cerrado',\n    'idea.action.join': 'Unirte',\n    'idea.action.joined': 'Unido',\n    'idea.action.leave': 'Salir',\n    'idea.footer.developed_by': 'Desarrollado por el',\n    'idea.footer.hosted_by': 'Hospedado por el',\n    'idea.send': `Enviado por {user}`,\n    'idea.state.new': 'NUEVA',\n    'idea.state.pending': 'PENDIENTE',\n    'idea.state.approved': 'APROBADA',\n    'idea.state.rejected': 'RECHAZADA',\n    'idea.topmenu.help': 'Ayuda',\n    'idea.topmenu.home': 'Inicio',\n    'idea.extra.users': `{count}/{seats} {count, plural, one {persona} other {personas}}`,\n    'idea.extra.users.unlimited': `{count} {count, plural, one {persona} other {personas}}`\n  }\n};\n","/* tslint:disable */\n\nimport { Component } from 'react';\nimport Router from 'next/router';\nimport { action } from '@storybook/addon-actions';\nimport PropTypes from 'prop-types';\n\nconst actionWithPromise = (path: string) => {\n  action('clicked link')(path);\n  return new Promise((_, reject) => reject());\n};\n\nconst mockedRouter = {\n  push: actionWithPromise,\n  replace: actionWithPromise,\n  prefetch: () => {},\n  route: '/index',\n  pathname: '/index'\n};\n\n// @ts-ignore\nRouter.router = mockedRouter;\n\nconst withMockRouterContext = (mockRouter: any) => {\n  class MockRouterContext extends Component {\n    public getChildContext() {\n      return {\n        router: { ...mockedRouter, ...mockRouter }\n      };\n    }\n    public render() {\n      return this.props.children;\n    }\n  }\n\n  // @ts-ignore\n  MockRouterContext.childContextTypes = {\n    router: PropTypes.object\n  };\n\n  return MockRouterContext;\n};\n\nexport const StorybookRouterFix = withMockRouterContext(mockedRouter);\n","import * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Menu, Icon, Container } from 'semantic-ui-react';\nimport styled from 'styled-components';\n\nimport ActiveLink from './ActiveLink';\n\nexport const TopMenu = ({}): JSX.Element => (\n  <div className=\"pusher\">\n    <Menu fixed=\"top\" pointing secondary size=\"large\">\n      <Container>\n        <MenuBurgerItem>\n          <Icon name=\"sidebar\" />\n        </MenuBurgerItem>\n        <ActiveLink href=\"/index\" passHref>\n          <MenuLogoItem className=\"logo\" as=\"a\" />\n        </ActiveLink>\n        <ActiveLink activeClassName=\"active\" href=\"/index\" passHref>\n          <Menu.Item>\n            <FormattedMessage id=\"idea.topmenu.home\" />\n          </Menu.Item>\n        </ActiveLink>\n        <ActiveLink activeClassName=\"active\" href=\"/help\" passHref>\n          <Menu.Item>\n            <FormattedMessage id=\"idea.topmenu.help\" />\n          </Menu.Item>\n        </ActiveLink>\n      </Container>\n    </Menu>\n  </div>\n);\n\nconst MenuBurgerItem = styled(Menu.Item)`\n  .ui.menu:not(.vertical) &.item {\n    display: none;\n  }\n`;\n\nconst MenuLogoItem = styled(Menu.Item)`\n  background: url('images/ideas-small.png') no-repeat;\n  width: 66px;\n  height: 27px;\n  margin: 5px 10px 0 15px;\n`;\n","import * as React from \"react\";\nimport { Icon, SemanticICONS } from \"semantic-ui-react\";\n\nexport const IdeaExtraItem = ({ icon, children }: Props): JSX.Element => (\n  <span className=\"extra item\">\n    <Icon name={icon} />\n    {children}\n    <style jsx>{`\n      .extra.item {\n        margin-left: 10px;\n      }\n    `}</style>\n  </span>\n);\n\nexport interface Props {\n  icon: SemanticICONS;\n  children: any;\n}\n","import * as React from 'react';\nimport { Card, Label } from 'semantic-ui-react';\nimport { FormattedMessage, FormattedRelative } from 'react-intl';\nimport styled, { css } from 'styled-components';\nimport Parser from 'html-react-parser';\n\nimport { IdeaExtraItem } from './IdeaExtraItem';\nimport { IdeaActionButton } from './IdeaActionButton';\nimport { Idea } from '../../model/Idea';\n\nexport const IdeaItem = ({\n  idea,\n  summary,\n  handleOnTitleClick,\n  handleOnJoin,\n  handleOnLeave\n}: Props): JSX.Element => (\n  <IdeaBox fluid>\n    <IdeaContent\n      {...(summary ? { clickable: true, onClick: () => handleOnTitleClick(idea.slug) } : {})}\n    >\n      <IdeaSendBy>\n        <IdeaGroupName>{idea.group.name}</IdeaGroupName>\n        <FormattedMessage id=\"idea.send\" values={{ user: idea.owner.username }} />\n        <FormattedRelative value={idea.createdAt} />\n      </IdeaSendBy>\n      <Card.Header>{idea.title}</Card.Header>\n      <Label attached={'top right'} inverted color={'green'}>\n        <FormattedMessage id={`idea.state.${idea.state}`} />\n      </Label>\n      <IdeaDescription summary={summary}>{Parser(idea.description)}</IdeaDescription>\n    </IdeaContent>\n    <IdeaContent extra>\n      <IdeaActionButton\n        closed={idea.closed}\n        joined={!!idea.joined}\n        handleOnJoin={handleOnJoin}\n        handleOnLeave={handleOnLeave}\n      />\n      <IdeaExtraItem icon=\"user\">\n        <FormattedMessage\n          id={idea.numSeats ? 'idea.extra.users' : 'idea.extra.users.unlimited'}\n          values={{\n            count: idea.votes.length,\n            seats: idea.numSeats\n          }}\n        />\n      </IdeaExtraItem>\n    </IdeaContent>\n  </IdeaBox>\n);\n\nexport interface Props {\n  idea: Idea;\n  summary: boolean;\n  handleOnTitleClick: (slug: string) => any;\n  handleOnJoin: any;\n  handleOnLeave: any;\n}\n\nconst IdeaBox = styled(Card)`\n  &.ui.card {\n    border-radius: 0;\n  }\n`;\n\nconst IdeaContent = styled(Card.Content)`\n  ${props =>\n    props.clickable &&\n    css`\n      cursor: pointer;\n    `}\n\n  &.content.extra {\n    border-top: unset !important;\n  }\n`;\n\nconst IdeaSendBy = styled(Card.Meta)`\n  margin-bottom: 10px;\n`;\n\nconst IdeaGroupName = styled.span`\n  background-color: #edeff1;\n  padding: 0 4px;\n  border-radius: 2px;\n  font-weight: 500;\n  color: black;\n`;\n\nconst IdeaDescription = styled(Card.Description)`\n  clear: unset;\n  font-family: 'Lato', sans-serif;\n\n  ${props =>\n    props.summary &&\n    css`\n      -webkit-mask-image: linear-gradient(180deg, #000 60%, transparent);\n      mask-image: linear-gradient(180deg, #000 60%, transparent);\n      overflow: hidden;\n      padding: 5px 8px 10px;\n      max-height: 200px;\n    `}\n`;\n","import centered from '@storybook/addon-centered/react';\nimport { withKnobs } from '@storybook/addon-knobs/react';\nimport { configure, addDecorator } from '@storybook/react';\nimport { setIntlConfig, withIntl } from 'storybook-addon-intl';\n\n// Load the locale data for all your defined locales\nimport { addLocaleData } from 'react-intl';\nimport enLocaleData from 'react-intl/locale-data/en';\nimport esLocaleData from 'react-intl/locale-data/es';\n\naddLocaleData(enLocaleData);\naddLocaleData(esLocaleData);\n\nimport { messages } from '../../locales/messages';\nconst getMessages = locale => messages[locale];\n\nsetIntlConfig({\n  locales: ['en', 'es'],\n  defaultLocale: 'es',\n  getMessages\n});\n\n// automatically import all files ending in *.stories.tsx\nconst req = require.context('../../stories', true, /\\.stories\\.tsx$/);\nconst loadStories = () => {\n  req.keys().forEach(filename => req(filename));\n};\n\naddDecorator(centered);\naddDecorator(withKnobs);\naddDecorator(withIntl);\nconfigure(loadStories, module);\n"],"mappings":"AAAA;;;;;;;;;;ACAA;;;;ACsCA;;;;;ACnCA;;;;AC+DA;AACA;;;;;;;AAWA;;AAIA;;;;;;AAQA;;;;AAIA;;;;;;;AC9FA","sourceRoot":""}